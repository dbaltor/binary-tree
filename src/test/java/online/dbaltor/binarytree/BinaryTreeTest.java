/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package online.dbaltor.binarytree;

import org.junit.jupiter.api.Test;

import online.dbaltor.binarytree.BinaryTree.TreeNode;
import static online.dbaltor.binarytree.BinaryTree.*;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

class BinaryTreeTest {

    private Optional<TreeNode<String>> tree = Optional.empty();

    @BeforeEach
    void setup() {
        // build a tree for tests
        tree = add(tree, "C");
        tree = add(tree, "D");
        tree = add(tree, "A");
        tree = add(tree, "B");
        tree = add(tree, "A");
        tree = add(tree, "K");
        tree = add(tree, "G");
        tree = add(tree, "E");
        tree = add(tree, "H");
    }

    @Test void shouldAddAnItem() {
        // given
        final var ListWithX = List.of("X");
        Optional<TreeNode<String>> emptyTree = Optional.empty();
        final var traversalResult = new ArrayList<String>(ListWithX.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);

        // when
        in_order_dfs_traversal(Optional.empty(), traversalLogger);
        // then 
        assertIterableEquals(new ArrayList<String>(), traversalResult);

        // when
        emptyTree = add(emptyTree, "X");
        in_order_dfs_traversal(emptyTree, traversalLogger);
        // then
        assertIterableEquals(ListWithX, traversalResult);
    }

    @Test void shouldTraverseInOrderDFS() {
        // given
        final var inOrderDFSTraversal = List.of("A", "B", "C", "D", "E", "G", "H", "K");
        final var traversalResult = new ArrayList<String>(inOrderDFSTraversal.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);
        // when
        in_order_dfs_traversal(tree, traversalLogger);
        // then
        assertIterableEquals(inOrderDFSTraversal, traversalResult);
    }

    @Test void shouldTraversePreOrderDFS() {
        // given
        final var preOrderDFSTraversal = List.of("C", "A", "B", "D", "K", "G", "E", "H");
        final var traversalResult = new ArrayList<String>(preOrderDFSTraversal.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);
        // when
        pre_order_dfs_traversal(tree, traversalLogger);
        // then
        assertIterableEquals(preOrderDFSTraversal, traversalResult);
    }

    @Test void shouldTraversePostOrderDFS() {
        // given
        final var postOrderDFSTraversal = List.of("B", "A", "E", "H", "G", "K", "D", "C");
        final var traversalResult = new ArrayList<String>(postOrderDFSTraversal.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);
        // when
        post_order_dfs_traversal(tree, traversalLogger);
        // then
        assertIterableEquals(postOrderDFSTraversal, traversalResult);
    }

    @Test void shouldTraverseBFS() {
        // given
        final var bfsTraversal = List.of("C", "A", "D", "B", "K", "G", "E", "H");
        final var traversalResult = new ArrayList<String>(bfsTraversal.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);
        // when
        bfs_traversal(tree, traversalLogger);
        // then
        assertIterableEquals(bfsTraversal, traversalResult);
    }

    @Test void shouldCalculateHeight() {
        // when
        var treeHeight = height(tree);
        // then
        assertEquals(5, treeHeight);
    }

    @Test void shouldRetrieveMaximumItem() {
        // when
        var max = maximum(tree).get();
        // then
        assertEquals("K", max);;
    }

    @Test void shouldRetrieveMininumItem() {
        // when
        var min = minimum(tree).get();
        // then
        assertEquals("A", min);;
    }

    @Test void shouldRemoveAnItem() {
        // given
        final var ListWithoutC = List.of("A", "B", "D", "E", "G", "H", "K");
        final var traversalResult = new ArrayList<String>(ListWithoutC.size());
        Consumer<String> traversalLogger = item -> traversalResult.add(item);
        // when
        tree = remove(tree, "C");
        in_order_dfs_traversal(tree, traversalLogger);
        // then
        assertIterableEquals(ListWithoutC, traversalResult);
    }
}
